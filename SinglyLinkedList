
class Node:
    def __init__(self,value):
        self.value=value
        self.next=None

class LinkedList:
    def __init__(self,value):
        new_node=Node(value)
        self.head=new_node
        self.tail=new_node
        self.length=1

    def printList(self):
        temp=self.head
        while temp is not None:
            print(temp.value)
            temp=temp.next

    def append(self,value):
        new_node=Node(value)
        if self.length==0:
            self.head=new_node
            self.tail=new_node
        else:
            self.tail.next=new_node
            self.tail=new_node
        self.length+=1

    def pop(self):
        if self.length==0:
            return None
        temp=self.head
        pre=self.head
        while temp.next is not None:
            pre=temp
            temp=temp.next
        self.tail=pre
        self.tail.next=None
        self.length-=1
        if self.length==0:
            self.head=None
            self.tail=None
        return temp.value

    def prepend(self,value):
        new_node=Node(value)
        if self.length==0:
            self.head=new_node
            self.tail=new_node
        else:
            new_node.next=self.head
            self.head=new_node
        self.length+=1
        return True

    def popFirst(self):
        if self.length==0:
            return None
        temp=self.head
        self.head=self.head.next
        temp.next=None
        self.length-=1
        if self.length==0:
            self.tail=None
        return temp.value

    def get(self,index):
        if index<0 or index>=self.length:
            return None
        temp=self.head
        for _ in range(index):
            temp=temp.next
        return temp

    def set_value(self,index,value):
        if index<0 or index>=self.length:
            return None
        temp=self.head
        for _ in range(index):
            temp=temp.next
        temp.value=value
        return True

    def insert(self,index,value):
        if index<0 or index>self.length:
            return False
        if index==0:
            return(self.prepend(value))
        if index==self.length:
            return(self.append(value))
        temp=self.get(index-1)
        new_node=Node(value)
        new_node.next=temp.next
        temp.next=new_node
        self.length+=1
        return True
  
    def remove(self,index):
        if index<0 or index>=self.length:
            return False
        if index==0:
            return(self.popFirst())
        if index==self.length-1:
            return(self.pop())
        pre=self.get(index-1)
        temp=pre.next
        pre.next=temp.next
        temp.next=None
        self.length-=1
        return temp

    def reverse(self):
        temp=self.head
        self.head=self.tail
        self.tail=temp
        after=temp.next
        before=None
        for _ in range(self.length):
            after=temp.next
            temp.next=before
            before=temp
            temp=after
        

my_list=LinkedList(10)
my_list.append(4)
my_list.prepend(5)
my_list.set_value(1,8)
my_list.insert(3,3)
my_list.printList()
# print(my_list.remove(2))
print("\n")
my_list.reverse()
my_list.printList()
# print(my_list.popFirst())

