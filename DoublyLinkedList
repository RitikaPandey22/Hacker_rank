from sre_constants import NOT_LITERAL_UNI_IGNORE
from tkinter import N


class Node:
    def __init__(self,value):
        self.value=value
        self.next=None
        self.prev=None

class LinkedList:

    def __init__(self,value):
        new_node=Node(value)
        self.head=new_node
        self.tail=new_node
        self.length=1

    def printList(self):
        temp=self.head
        while temp is not None:
            print(temp.value)
            temp=temp.next

    def append(self,value):
        new_node=Node(value)
        if(self.length==0):
            self.head=new_node
            self.tail=new_node
        else:
            self.tail.next=new_node
            new_node.prev=self.tail
            self.tail=new_node
        self.length+=1

    def pop(self):
        if self.length==0:
            return None
        temp=self.tail
        if(self.length==1):
            self.head=None
            self.tail=None
        else:
            self.tail=self.tail.prev
            self.tail.next=None
            temp.prev=None
        self.length-=1
        return temp.value

    def prepend(self,value):
        new_node=Node(value)
        if self.length==0:
            self.head=new_node
            self.tail=new_node
        else:
            self.head.prev=new_node
            new_node.next=self.head
            self.head=new_node
        self.length+=1
        return True

    def pop_first(self):
        if self.length==0:
            return None
        temp=self.head
        if self.length==1:
            self.head=None
            self.tail=None
        else:
            self.head=self.head.next
            self.head.prev=None
        self.length-=1
        return temp

    def get(self,index):
        if(index<0 or index>=self.length):
            return None
        temp=self.head
        if index<self.length/2:
            for _ in range(index):
                temp=temp.next
        else:
            temp=self.tail
            for _ in range(self.length-1,index,-1):
                temp=temp.prev
        return temp

    def set(self,index,value):
        temp=self.get(index)
        if temp is not None:
            temp.value=value
            return True
        else:
            return False

    def insert(self,index,value):
        new_node=Node(value)
        if index<0 or index>self.length:
            return False
        if(index==0):
            return(self.prepend(value))
        if(index==self.length):
            return (self.append(value))

        temp=self.get(index)

        pre=temp.prev
        new_node.next=pre.next
        pre.next=new_node
        new_node.prev=temp.prev
        temp.prev=new_node
        
        self.length+=1
        return True

    def remove(self,index):
        if index==0:
            return(self.pop_first())
        if index==self.length-1:
            return(self.pop())
        if index<0 or index>=self.length:
            return None

        temp=self.get(index)

        temp.prev.next=temp.next
        temp.next.prev=temp.prev
        temp.prev=None
        temp.next=None

        self.length-=1
        return temp.value
        

            

my_list=LinkedList(5)
my_list.append(6)
my_list.append(8)
my_list.prepend(3)
my_list.printList()
print("\n")
# my_list.pop_first()
# print(my_list.get(2))
my_list.insert(1,7)
my_list.printList()
print("\n")
my_list.remove(3)
print("\n")
my_list.printList()
